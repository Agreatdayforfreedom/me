---
import Image from '../components/svg/Image.astro';
import Close from '../components/svg/Close.astro';
import ArrowLeft from '../components/svg/ArrowLeft.astro';
import ArrowRight from '../components/svg/ArrowRight.astro';


interface Props {
  paths: string[];
  data_open: string;
}

const { paths, data_open } = Astro.props;

---

<div class="w-[18px] h-[18px]">
  <button data-select="img_preview" data-id={data_open} aria-label="preview-imagen-button"><Image size={22}/></button>
  <dialog class="max-w-full md:max-w-[700px] max-h-auto bg-transparent" data-open={data_open}>
    <div class="expand">
      {paths.map((path:string) => (
        <div id="slide">
          <img src={path} />
          </div>
      ))}
    </div>
      
    <div class="text-white justify-center flex gap-5 mt-2">
      <button id="left" class="hover:-translate-x-1 disabled:translate-x-0 [&>svg]:disabled:fill-[#808080] transition-transform hover:cursor-pointer">
        <ArrowLeft />
      </button>
      <span id="total_images" class="flex items-end font-semibold text-lg"></span>
      <button id="right" class="hover:translate-x-1 disabled:translate-x-0 [&>svg]:disabled:fill-[#808080] transition-transform hover:cursor-pointer">
        <ArrowRight />
      </button>
    </div>

    <form class="fixed top-0 right-0">
      <button id="onclose" formmethod="dialog">
        <Close />
      </button>
    </form>
  </dialog>

  <script>
    const $buttons: NodeListOf<HTMLElement> = document.querySelectorAll('[data-select="img_preview"]');
    
    function show(id: string, activedIndex: number) {
      const $slider: NodeListOf<HTMLDivElement> | null  = document.querySelectorAll(`[data-open='${id}'] #slide`);
      
    
      for (let i = 0; i < $slider.length; i++) {
        $slider[i].addEventListener('click', (e) => e.stopPropagation());
        
        if(activedIndex == i) $slider[i].style.display = "block";
        else $slider[i].style.display = "none";
      }
    }

    $buttons.forEach($button => {     
      let activedIndex = 0; 
      const $dialog: HTMLDialogElement | null = document.querySelector(`[data-open='${$button.dataset.id}']`);
      const $onclose = document.querySelector(`[data-open='${$button.dataset.id}']>form>button`);
      const $slider: NodeListOf<HTMLDivElement> | null  = document.querySelectorAll(`[data-open='${$button.dataset.id}'] #slide`);

      if(!$dialog) return;
      $onclose?.addEventListener('click', (e) => {
        e.preventDefault();
        
        if($dialog) {
          $dialog.close()
        }
      })
      
      if ($button.dataset.id) show($button.dataset.id, activedIndex)

      const $left: HTMLButtonElement | null = document.querySelector(`[data-open='${$button.dataset.id}']>div>#left`);
      const $total = document.querySelector(`[data-open='${$button.dataset.id}']>div>#total_images`);
      const $right: HTMLButtonElement | null = document.querySelector(`[data-open='${$button.dataset.id}']>div>#right`);

      if($total) {
        $total.textContent = (activedIndex + 1).toString()
      }

      if($slider.length === 1 && $left && $right) {
        $left.setAttribute("disabled", "true");
        $right.setAttribute("disabled", "true");
      }

      $left?.addEventListener('click', (e) => {
        e.stopPropagation()
        if(activedIndex > 0) activedIndex--
        else activedIndex = $slider.length - 1;
        if ($button.dataset.id && $total) {
          
          $total.textContent = (activedIndex + 1).toString();
          show($button.dataset.id, activedIndex)
        }
      })
      $right?.addEventListener('click', (e) => {
        e.stopPropagation()
        if(activedIndex < $slider.length - 1) activedIndex++
        else activedIndex = 0;
        if($button.dataset.id && $total) 
        {
          $total.textContent = (activedIndex + 1).toString();
          show($button.dataset.id, activedIndex);
        }
      })

      $dialog.addEventListener("click", () => {
        $dialog.close()
      })
      $button?.addEventListener('click',() => {
        if($dialog) {
          $dialog.showModal();
        }
      });
    });

  </script>
</div>

<style>
  dialog::backdrop {
    backdrop-filter: blur(0px);
    transition: display .5s allow-discrete,
    overlay .5s allow-discrete,backdrop-filter .5s;
  }

  dialog[open]::backdrop{
    backdrop-filter: blur(2px);
  }

  @starting-style {
  dialog[open]::backdrop {
    backdrop-filter: blur(0px);
  }
}

  dialog[open] > .expand {
    animation: expandIn 0.25s ease normal;
  }
  
  @keyframes expandIn{
    from {
      opacity: 0;
      scale: 0.5;
    }
    to {
      opacity: 1;
      scale:1;
    }
  }
</style>